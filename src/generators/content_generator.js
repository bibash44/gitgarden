const faker = require("faker");

class ContentGenerator {
  generateContent(extension) {
    switch (extension) {
        case '.js':
            return this.generateJavaScript();
        case '.py':
            return this.generatePython();
        case '.java':
            return this.generateJava();
        case '.txt':
            return this.generateText();
        case '.md':
            return this.generateMarkdown();
        default:
            return this.generateText();
    }
  }

  generateJavaScript() {
    const functionName = faker.hacker.verb() + faker.hacker.noun();
    const variableName = faker.hacker.adjective() + faker.hacker.noun();

    return `
        
        //Generated Javascript file
        // ${faker.git.commitMessage()}

        /**
        * @description ${faker.hacker.phrase()}
        * @created ${new Date().toISOString()}
        */

function ${functionName}() {
    const ${variableName} = '${faker.hacker.phrase()}';
    console.log('Processing:', ${variableName});
    
    return {
        id: '${faker.datatype.uuid()}',
        data: ${variableName},
        timestamp: '${faker.date.recent()}',
        status: '${faker.git.branch()}'
    };
}

class ${faker.hacker.noun()}Service {
    constructor() {
        this.name = '${faker.company.companyName()}';
    }

    process() {
        return ${functionName}();
    }
}

module.exports = new ${faker.hacker.noun()}Service();
        `.trim();
  }

  generatePython() {
    const className = faker.hacker.noun() + "Processor";
    const methodName = faker.hacker.verb() + "_data";

    return `
# Generated Python File
# ${faker.git.commitMessage()}

import datetime
import uuid

class ${className}:
"""
${faker.hacker.phrase()}
Created: ${new Date().toISOString()}
"""

def __init__(self):
    self.id = str(uuid.uuid4())
    self.name = "${faker.company.companyName()}"

def ${methodName}(self):
    data = {
        "id": self.id,
        "timestamp": str(datetime.datetime.now()),
        "status": "${faker.git.branch()}",
        "message": "${faker.hacker.phrase()}"
    }
    return data

if __name__ == "__main__":
processor = ${className}()
result = processor.${methodName}()
print(f"Processing result: {result}")
    `.trim();
  }
  generateJava() {
    const className = faker.hacker.noun() + "Processor";
    const methodName = faker.hacker.verb() + "Data";

    return `
// Generated Java File
// ${faker.git.commitMessage()}

import java.util.UUID;
import java.time.LocalDateTime;

public class ${className} {
private final String id;
private final String name;

public ${className}() {
    this.id = UUID.randomUUID().toString();
    this.name = "${faker.company.companyName()}";
}

public String ${methodName}() {
    String data = "${faker.hacker.phrase()}";
    System.out.println("Processing: " + data);
    return data;
}

public static void main(String[] args) {
    ${className} processor = new ${className}();
    String result = processor.${methodName}();
    System.out.println("Result: " + result);
}
}
    `.trim();
  }


  generateText() {
    return `
${faker.git.commitMessage()}
Created: ${new Date().toISOString()}

${faker.lorem.paragraphs(3)}

Key Points:
- ${faker.hacker.phrase()}
- ${faker.hacker.phrase()}
- ${faker.hacker.phrase()}

Generated by GitGarden
    `.trim();
  }

  generateMarkdown() {
    return `
# ${faker.git.commitMessage()}

## Overview
${faker.lorem.paragraph()}

## Key Features
- ${faker.hacker.phrase()}
- ${faker.hacker.phrase()}
- ${faker.hacker.phrase()}

## Implementation Details
${faker.lorem.paragraphs(2)}

### Notes
> ${faker.hacker.phrase()}

Generated by GitGarden on ${new Date().toISOString()}
    `.trim();
}

}

module.exports =  ContentGenerator;